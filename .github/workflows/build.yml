name: build

on:
  push:
    branches: [ main ]
    paths-ignore:
    - '**/*.md'
    - '**/*.gitignore'
    - '**/*.gitattributes'
  pull_request:
    branches:
      - main
      - dotnet-vnext
      - dotnet-nightly
  workflow_dispatch:

permissions: {}

jobs:
  build:
    name: ${{ matrix.os-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20

    env:
      ARCHIVE_NAME: alexa-london-travel
      ARTIFACT_NAME: lambda
      ASPIRE_DEPENDENCY_CHECK_TIMEOUT: 0
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_GENERATE_ASPNET_CERTIFICATE: false
      DOTNET_NOLOGO: true
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
      FORCE_COLOR: 1
      NUGET_XMLDOC_MODE: skip
      TERM: xterm

    outputs:
      archive-name: ${{ env.ARCHIVE_NAME }}
      artifact-name: ${{ env.ARTIFACT_NAME }}
      artifact-run-id: ${{ github.run_id }}

    permissions:
      attestations: write
      contents: read
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - os-name: macos
            runner: macos-latest
          - os-name: linux
            runner: ubuntu-24.04-arm
          - os-name: windows
            runner: windows-latest

    steps:

    - name: Update Windows agent configuration
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        "DOTNET_INSTALL_DIR=D:\tools\dotnet" >> ${env:GITHUB_ENV}
        "DOTNET_ROOT=D:\tools\dotnet" >> ${env:GITHUB_ENV}
        "NUGET_PACKAGES=D:\.nuget\packages" >> ${env:GITHUB_ENV}

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        filter: 'tree:0'
        show-progress: false

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1

    - name: Build, Test and Package
      id: build
      shell: pwsh
      run: ./build.ps1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
      with:
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results to Codecov
      uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
      if: ${{ !cancelled() }}
      with:
        flags: ${{ matrix.os-name }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Publish artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts-${{ matrix.os-name }}
        path: ./artifacts

    - name: Create Lambda ZIP file
      if: runner.os == 'Linux'
      shell: bash
      run: |
        cd "./artifacts/publish/LondonTravel.Skill/release_linux-arm64" || exit 1
        if [ -f "./bootstrap" ]
        then
          chmod +x ./bootstrap
        fi
        zip -r "../../../${ARCHIVE_NAME}.zip" . || exit 1

    - name: Attest artifacts
      uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
      if: |
        runner.os == 'Linux' &&
        github.event.repository.fork == false &&
        github.ref_name == github.event.repository.default_branch
      with:
        subject-path: ./artifacts/${{ env.ARCHIVE_NAME }}.zip

    - name: Publish deployment package
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: runner.os == 'Linux' && success()
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./artifacts/${{ env.ARCHIVE_NAME }}.zip
        if-no-files-found: error

    - name: Upload any crash dumps
      shell: pwsh
      if: |
        !cancelled() &&
        steps.build.outcome == 'failure' &&
        github.event.repository.fork == false &&
        github.event.sender.login != 'dependabot[bot]'
      env:
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.CRASH_DUMPS_STORAGE_CONNECTION_STRING }}
        # renovate: datasource=github-releases depName=PSCompression packageName=santisq/PSCompression
        PSCOMPRESSION_VERSION: '3.0.0'
      run: |
        $dumps = Get-ChildItem -Path ${env:GITHUB_WORKSPACE} -Filter "*.dmp" -Recurse
        if ($null -ne $dumps) {

          $container = ${env:GITHUB_REPOSITORY}.Replace("/", "-")
          az storage container create --name $container --public-access off | Out-Null

          Install-Module PSCompression -RequiredVersion ${env:PSCOMPRESSION_VERSION} -AcceptLicense -Force -Scope CurrentUser

          $dumps | ForEach-Object {
            $zipPath = $_.FullName + ".zip"
            $zipName = $_.Name + ".zip"

            Write-Output "Compressing crash dump $($_.Name)..."
            Compress-ZipArchive -Path $_.FullName -Destination $zipPath

            az storage blob upload `
              --container-name $container `
              --file $zipPath `
              --name $zipName `
              --metadata "GITHUB_RUN_ATTEMPT=${env:GITHUB_RUN_ATTEMPT}" "GITHUB_WORKFLOW=${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}/actions/runs/${env:GITHUB_RUN_ID}" "RUNNER_OS=${env:RUNNER_OS}" `
              --overwrite true

            if ($LASTEXITCODE -eq 0) {
              Write-Output "::notice::Uploaded crash dump $($_.Name) to Azure Storage."
            }
          }
        }

  deploy-dev:
    if: github.event.repository.fork == false && github.ref_name == github.event.repository.default_branch
    name: dev
    needs: [ build ]
    uses: ./.github/workflows/deploy-app.yml
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    secrets: inherit
    with:
      archive-name: ${{ needs.build.outputs.archive-name }}
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      artifact-run-id: ${{ needs.build.outputs.artifact-run-id }}
      environment-name: dev
      function-name: alexa-london-travel-dev
      skill-stage: development

  deploy-prod:
    name: production
    needs: [ build, deploy-dev ]
    uses: ./.github/workflows/deploy-app.yml
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    secrets: inherit
    with:
      archive-name: ${{ needs.build.outputs.archive-name }}
      artifact-name: ${{ needs.build.outputs.artifact-name }}
      artifact-run-id: ${{ needs.build.outputs.artifact-run-id }}
      environment-name: production
      function-name: alexa-london-travel
      skill-stage: live
